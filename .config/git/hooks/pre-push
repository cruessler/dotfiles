#!/usr/bin/env ruby

# The following introductory comment is copied verbatim from [1].

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# The [template][1] has been converted from Bash to Ruby and, inspired by [2],
# augmented a little.

# [1]: /usr/share/git-core/templates/hooks/pre-push
# [2]: https://gist.github.com/jgosmann/003e52db6959365c0ffda264776e7e44

remote = ARGV.shift
url = ARGV.shift

z40 = "0000000000000000000000000000000000000000"

refute_markers = [ "WIP", "\\[WIP\\]", "squash!", "fixup!" ]

ARGF.readlines.each do |line|
  local_ref, local_sha, remote_ref, remote_sha = line.chomp.split(" ")

  next if remote_ref != "refs/heads/master"

  if local_sha == z40 then
    # Handle delete
    exit 0
  else
    if remote_sha == z40 then
      # New branch, examine all commits
      range = local_sha
    else
      # Update to existing branch, examine new commits
      range = "#{remote_sha}..#{local_sha}"
    end

    refute_markers.each do |marker|
      if not `git rev-list -n 1 --grep '^#{marker}' "#{range}"`.empty? then
        puts "Found commit whose message starts with '#{marker}' in #{local_ref}, not pushing"

        exit 1
      end
    end
  end
end

exit 0
